javascript: &javascript
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      CODECOV_TOKEN: b0d35139-0a75-427a-907b-2c78a762f8f0
    steps:
      - checkout
      - run: mkdir -p $CIRCLE_TEST_REPORTS
      - run:
          name: View node versions
          command: |
            node --version
            npm -version
            yarn -version
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "frontend/yarn.lock" }}
      - run:
          name: Install Dependencies
          command: |
            cd frontend
            yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "frontend/yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - run:
          name: Lint & Format JS Code
          command: |
            cd frontend
            yarn run lint
            yarn run format
      - run:
          name: Check for JS Formatting Diffs
          command: |
            cd frontend
            git diff --name-status
            git diff-files --quiet || (echo 'The files above have not been formatted!' && (exit 1))
      - run:
          name: Run JS Tests & Coverage
          command: |
            cd frontend
            export TZ=America/New_York
            export CI=true
            yarn run test-with-coverage -w 1
            bash <(curl -s https://codecov.io/bash) -c -F javascript -f ./JS_coverage/lcov.info
            yarn run report-duplicate-code
            cp -r ./JS_coverage /tmp/circleci-test-results
          no_output_timeout: 1200
      - run:
          name: Build JS
          command: |
            cd frontend
            yarn run build
      - persist_to_workspace:
          root: .
          paths:
            - dtale/static/dist
            - dtale/static/dash
      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results
      - store_artifacts:
          path: /tmp/circleci-test-results
python_variables: &python_variables
  CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
  CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
  CODECOV_TOKEN: b0d35139-0a75-427a-907b-2c78a762f8f0
  VERSION: 3.1.7
  PANDOC_RELEASES_URL: https://github.com/jgm/pandoc/releases
python_formatting: &python_formatting
    parallelism: 1
    shell: /bin/bash --login
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - restore_cache:
          keys:
            # This branch if available
            - v1-dep-{{ .Branch }}-
            # Default branch if not
            - v1-dep-master-
            # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
            - v1-dep-
      - run:
          name: Create and activate virtualenv
          command: |
            virtualenv ci
            . ci/bin/activate
      - run:
          name: Run Flake8
          command: |
            . ci/bin/activate
            pip install flake8
            flake8
      - run:
          name: Run black
          command: |
            . ci/bin/activate
            pip install black
            black --check setup.py dtale tests
python: &python
    parallelism: 1
    shell: /bin/bash --login
    steps:
      - attach_workspace:
          at: /tmp
      - checkout
      - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
      # Restore the dependency cache
      - restore_cache:
          keys:
          # This branch if available
          - v1-dep-{{ .Branch }}-
          # Default branch if not
          - v1-dep-master-
          # Any branch if there are none on the default branch - this should be unnecessary if you have your default branch configured correctly
          - v1-dep-
#      - run:
#          name: Install MongoDB
#          command: |
#            # run "cat /etc/os-release" to view information about the OS
#            # good article on how to install mongo, https://docs.mongodb.com/manual/tutorial/install-mongodb-on-debian/
#            cat /etc/os-release
#            which systemctl
#            # wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
#            # sudo apt-get install gnupg
#            # wget -qO - https://www.mongodb.org/static/pgp/server-4.2.asc | sudo apt-key add -
#            # echo "deb http://repo.mongodb.org/apt/debian buster/mongodb-org/4.2 main" | sudo tee /etc/apt/sources.list.d/mongodb-org-4.2.list
#            # sudo apt-get update
#            # sudo apt-get install -y mongodb-org
#            sudo apt-get install libcurl4 openssl liblzma5
#            wget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-debian10-4.4.2.tgz
#            tar -zxvf mongodb-linux-*-4.4.2.tgz
#            sudo cp mongodb-linux-*-4.4.2/bin/* /usr/local/bin/
#            sudo mkdir -p /var/lib/mongo
#            sudo mkdir -p /var/log/mongodb
#            sudo chown `whoami` /var/lib/mongo     # Or substitute another user
#            sudo chown `whoami` /var/log/mongodb   # Or substitute another user
      - run:
          name: Install R
          command: |
            sudo apt update
            sudo apt -y upgrade
            sudo apt -y install r-base
      - run:
          name: Create and activate virtualenv
          command: |
            virtualenv ci
            . ci/bin/activate
            # xlrd & xarray do not load correctly from "python setup.py develop"
            # possibly switch this script to use "pip install -r requirements.txt"
            pip install xlrd
            pip install xarray
            if [ "${CIRCLE_JOB}" == "build_3_10" ]; then
              pip install pybind11
              pip install -r requirements.txt
            fi
            # dash>=2.0.0 has a dependency on typing_extensions>=3.6.4 and for some reason circleci allows you to
            # download versions greater than 4.1.1 which aren't compatible with python 3.6
            if [ "${CIRCLE_JOB}" == "build_3_6" ]; then
              pip install typing_extensions==4.1.1
              pip install soupsieve==2.3.2
            fi
            python setup.py develop
      - run:
          name: Print environment
          command: |
            set -e
            . ci/bin/activate
            pip freeze
      # Save dependency cache
      - save_cache:
          key: v1-dep-{{ .Branch }}-{{ epoch }}
          paths:
          - ~/ci
      - run:
          name: Copy JS Artifacts
          command: |
            ls -al /tmp/dtale/static/dist
            cp -r /tmp/dtale/static/dist ./dtale/static/
            ls -al /tmp/dtale/static/dash
            cp -r /tmp/dtale/static/dash ./dtale/static/
      - run:
          name: Setup tests
          command: |
            set -e
            . ci/bin/activate
            if [ "${CIRCLE_JOB}" != "build_2_7" ]; then
              pip install -e ".[arcticdb]"
            fi
            pip install -e ".[dash-bio]"
            pip install -e ".[redis]"
            pip install -e ".[r]"
            pip install -e ".[tests]"
            pip install pyarrow
      - run:
          name: Print environment
          command: |
            set -e
            . ci/bin/activate
            pip freeze
      # Test
      - run:
         name: Run all tests
         command: |
           set -e
           . ci/bin/activate
           export TZ=America/New_York
           export MPLBACKEND=Agg
           python setup.py test
           bash <(curl -s https://codecov.io/bash) -c -F python
           cp -r ./htmlcov /tmp/circleci-test-results
      - run:
          name: Download & Install latest pandoc
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # the 'latest' URL redirects to the name of the latest tag.
              # export PANDOC_VERSION=$(curl --connect-timeout 5  --max-time 10  --retry 5  --retry-delay 0  --retry-max-time 40 -L -I "$PANDOC_RELEASES_URL/latest" | sed -ne 's#Location:.*tag/\(.*\)$#\1#p' | tr -d "\n\r")
              export PANDOC_VERSION=2.9.2
              echo $PANDOC_VERSION
              export PANDOC_FILE=pandoc-$PANDOC_VERSION-1-amd64.deb
              echo $PANDOC_FILE
              wget $PANDOC_RELEASES_URL/download/$PANDOC_VERSION/$PANDOC_FILE
              sudo dpkg -i $PANDOC_FILE
              rm $PANDOC_FILE
            fi
      # Build egg
      - run:
          name: Build egg
          command: |
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              set -e
              . ci/bin/activate
              pip install pypandoc
              pip install docutils
              pip install Pygments
              grep version setup.py | grep -q $VERSION || (echo "ERROR: Version number not found in setup.py: $VERSION"; exit 1)
              grep -q $VERSION CHANGES.md || (echo "ERROR: Version number not found in CHANGES.md: $VERSION"; exit 1)
              grep -q $VERSION docker/dtale.env || (echo "ERROR: Version number not found in docker/dtale.env: $VERSION"; exit 1)
              grep -q $VERSION docs/source/conf.py || (echo "ERROR: Version number not found in docs/source/conf.py: $VERSION"; exit 1)
              grep -q $VERSION frontend/package.json || (echo "ERROR: Version number not found in package.json: $VERSION"; exit 1)
              python setup.py --long-description > ../README.rst
              # pandoc --from=markdown --to=rst --output=../README.rst README.md
              cat ../README.rst | rst2html.py 1> ../README.html 2> ../log
              cp ../README.rst /tmp/circleci-artifacts
              cp ../log /tmp/circleci-artifacts
              if [ -s ../log ] ; then
                exit 1
              fi # rst2html.py alwaysexits with 0, check log size
              python setup.py bdist_wheel --universal
              # Deprecated by pypi
              # python setup.py bdist_egg
              python setup.py sdist
              cp -r ./dist /tmp/circleci-artifacts
            fi
      # Save test results
      - store_test_results:
          path: /tmp/circleci-test-results
      # Save artifacts
      - store_artifacts:
          path: /tmp/circleci-artifacts
      - store_artifacts:
          path: /tmp/circleci-test-results
version: 2
jobs:
  build_JS:
    working_directory: /mnt/ramdisk
    docker:
      - image: cimg/node:19.0.1
    <<: *javascript
  check_python_formatting:
    working_directory: ~/man-group/dtale_python_formatting
    docker:
        - image: circleci/python:3.10-buster
    environment:
      <<: *python_variables
    <<: *python_formatting
  build_2_7:
    working_directory: ~/man-group/dtale_2_7
    docker:
      - image: circleci/python:2.7-buster
    environment:
      <<: *python_variables
    <<: *python
  build_3_6:
    working_directory: ~/man-group/dtale_3_6
    docker:
      - image: circleci/python:3.6-buster
    environment:
      <<: *python_variables
    <<: *python
  build_3_7:
    working_directory: ~/man-group/dtale_3_7
    docker:
      - image: circleci/python:3.7-buster
    environment:
      <<: *python_variables
    <<: *python
  build_3_8:
    working_directory: ~/man-group/dtale_3_8
    docker:
      - image: circleci/python:3.8-buster
    environment:
      <<: *python_variables
    <<: *python
  build_3_9:
    working_directory: ~/man-group/dtale_3_9
    docker:
      - image: circleci/python:3.9-buster
    environment:
      <<: *python_variables
    <<: *python
  build_3_10:
    working_directory: ~/man-group/dtale_3_10
    docker:
      - image: circleci/python:3.10-buster
    environment:
      <<: *python_variables
    <<: *python
workflows:
  version: 2
  build_all:
    jobs:
      - build_JS
      - check_python_formatting
      - build_2_7:
          requires:
            - build_JS
            - check_python_formatting
      - build_3_6:
          requires:
            - build_JS
            - check_python_formatting
      - build_3_7:
          requires:
            - build_JS
            - check_python_formatting
      - build_3_8:
          requires:
            - build_JS
            - check_python_formatting
      - build_3_9:
          requires:
            - build_JS
            - check_python_formatting
      - build_3_10:
          requires:
            - build_JS
            - check_python_formatting
